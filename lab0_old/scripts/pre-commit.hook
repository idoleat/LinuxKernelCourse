#!/usr/bin/env bash

CPPCHECK_suppresses="--inline-suppr harness.c --suppress=unmatchedSuppression:harness.c --suppress=missingIncludeSystem --suppress=unusedFunction:linenoise.c --suppress=variableScope:linenoise.c --suppress=nullPointerRedundantCheck:report.c"
CPPCHECK_OPTS="-I. --enable=all --error-exitcode=1 --force $CPPCHECK_suppresses ."

RETURN=0
CLANG_FORMAT=$(which clang-format)
if [ $? -ne 0 ]; then
    echo "[!] clang-format not installed. Unable to check source file format policy." >&2
    exit 1
fi

CPPCHECK=$(which cppcheck)
if [ $? -ne 0 ]; then
    echo "[!] cppcheck not installed. Unable to perform static analysis." >&2
    exit 1
fi

# Expected Cppcheck version is 1.90+
# First, Cppcheck 2.x
if [ -z "$($CPPCHECK --version | grep -E '^Cppcheck\s2')" ]; then
    # Second, Cppcheck 1.x
    CPPCHECK_VER=$($CPPCHECK --version | sed -Ee 's/Cppcheck 1.([0-9]+)/\1/;q')
    if [ $CPPCHECK_VER -lt 90 ]; then
        echo "[!] cppcheck version must be at least 1.90." >&2
        echo -e "    Check 'Developer Info' for building Cppcheck from source:\n" \
                "          http://cppcheck.sourceforge.net/devinfo/" >&2
        exit 1
    fi
fi

ASPELL=$(which aspell)
if [ $? -ne 0 ]; then
    echo "[!] aspell not installed. Unable to do spelling check." >&2
    exit 1
fi

DIFF=$(which colordiff)
if [ $? -ne 0 ]; then
    DIFF=diff
fi

FILES=`git diff --cached --name-only --diff-filter=ACMR | grep -E "\.(c|cpp|h)$"`
for FILE in $FILES; do
    nf=`git checkout-index --temp $FILE | cut -f 1`
    tempdir=`mktemp -d` || exit 1
    newfile=`mktemp ${tempdir}/${nf}.XXXXXX` || exit 1
    basename=`basename $FILE`

    source="${tempdir}/${basename}"
    mv $nf $source
    cp .clang-format $tempdir
    $CLANG_FORMAT $source > $newfile 2>> /dev/null
    $DIFF -u -p -B --label="modified $FILE" --label="expected coding style" \
          "${source}" "${newfile}"
    r=$?
    rm -rf "${tempdir}"
    if [ $r != 0 ] ; then
        echo "[!] $FILE does not follow the consistent coding style." >&2
        RETURN=1
    fi
    if [ $RETURN -eq 1 ]; then
        echo "" >&2
        echo "Make sure you indent as the following:" >&2
        echo "    clang-format -i $FILE" >&2
        echo
    fi
done

if [ ! -z "${FILES[*]}" ]; then
    echo "Following files need to be cleaned up:"
    echo "${FILES[*]}"
fi

# Prevent unsafe functions
root=$(git rev-parse --show-toplevel)
banned="([^f]gets\()|(sprintf\()|(strcpy\()"
status=0
for file in $(git diff --staged --name-only | grep -E "\.(c|cc|cpp|h|hh|hpp)\$")
do
    filepath="${root}/${file}"
    output=$(grep -nrE "${banned}" "${filepath}")
    if [ ! -z "${output}" ]; then
        echo "Dangerous function detected in ${filepath}"
        echo "${output}"
        echo
        echo "Read 'Common vulnerabilities guide for C programmers' carefully."
        echo "    https://security.web.cern.ch/security/recommendations/en/codetools/c.shtml"
        RETURN=1
    fi
done

# static analysis
$CPPCHECK $CPPCHECK_OPTS >/dev/null
if [ $? -ne 0 ]; then
    RETURN=1
    echo "" >&2
    echo "Fail to pass static analysis." >&2
    echo
fi

exit $RETURN
